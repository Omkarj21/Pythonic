Deep Copy and Shallow Copy in Python :

- In Python, Assignment statements do not copy objects, they create bindings between a target and an object.
- When we use = operator user thinks that this creates a new object; well, it doesn’t.
- It only creates a new variable that shares the reference of the original object.
- Sometimes a user wants to work with mutable objects, in order to do that, user looks for a way to create
    “real copies” or “clones” of these objects.
- Sometimes a user wants copies that user can modify without automatically modifying the original at the
    same time, in order to do that we create copies of objects.
- A copy is sometimes needed so one can change one copy without changing the other.
- In Python, there are two ways to create copies, Deep Copy and Shallow Copy
- In order to make these copy, we use copy module.
- We use copy.copy command for shallow_copy and copy.deepcopy for deep_copy operations.